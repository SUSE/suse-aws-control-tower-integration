
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Control Tower Lifecycle Events for SUSE

Parameters:
  SUSEPrivateImageID:
    Description: Provide the AMI ID(s) of the image you want to share. To share multiple AMIs seperate the AMI IDs with comma (',')
    Type: String

Resources:

  SUSEShareAMICaptureControlTowerLifeCycleEvents:
    Type: AWS::Events::Rule
    Properties:
      Description: Capture Control Tower LifeCycle Events for SUSE and Trigger an Action
      EventPattern:
        detail:
          eventName:
          - CreateManagedAccount
          - UpdateManagedAccount
          eventSource:
          - controltower.amazonaws.com
        detail-type:
        - AWS Service Event via CloudTrail
        source:
        - aws.controltower
      Name: SUSEShareAMICaptureControlTowerLifeCycleEvents
      State: ENABLED
      Targets:
      - Arn: !GetAtt "TriggerCustomizationsOnLifeCycleEvent.Arn"
        Id: IDCaptureControlTowerLifeCycleEvents


  #SUSE TriggerLifecyleEvent Lambda
  TriggerCustomizationsOnLifeCycleEvent:
    Type: AWS::Lambda::Function
    Properties:
      #FunctionName: !Join [ "-", [ "SUSEShareAMI", !Ref AWS::Region, !Ref AWS::AccountId ]]
      Environment:
        Variables:
            PrivateAMIlist: !Ref SUSEPrivateImageID

      Code:
        ZipFile: |
          import json
          import os
          import boto3
          import logging
          import urllib.request
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):

              print('Starting the Function')
              masterAcct = event['detail']['userIdentity']['accountId']
              eventDetails = event['detail']
              regionName = eventDetails['awsRegion']
              eventName = eventDetails['eventName']
              srvEventDetails = eventDetails['serviceEventDetails']
              if eventName == 'CreateManagedAccount' or eventName == 'UpdateManagedAccount':
                  newAccInfo = {}
                  logger.info('Event Processed Sucessfully')
                  if eventName == 'CreateManagedAccount':
                      newAccInfo = srvEventDetails['createManagedAccountStatus']
                  if eventName == 'UpdateManagedAccount':
                      newAccInfo = srvEventDetails['updateManagedAccountStatus']
                  cmdStatus = newAccInfo['state']
                  print("CMDStatus:", cmdStatus)
                  if cmdStatus == 'SUCCEEDED':
                      '''Sucessful event recieved'''
                      accId = newAccInfo['account']['accountId']
                      print("AccountID:", accId)

                      ec2 = boto3.client('ec2')
                      AMIarray=os.environ["PrivateAMIlist"].split(',')
                      for AMI in AMIarray:
                          ec2.modify_image_attribute(
                              Attribute='launchPermission',
                              ImageId= AMI,
                              OperationType='add',
                              UserIds=[accId]
                          )
                  else:
                      '''Unsucessful event recieved'''
                      logger.info('Unsucessful Event Recieved. SKIPPING :{}'.format(event))
                      return(False)
              else:
                  logger.info('Control Tower Event Captured :{}'.format(event))

      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt "SUSEShareAMITriggerLifecycleEventLambdaRole.Arn"
      Runtime: python3.7
      Timeout: 60


#SUSE Trigger LifecyleEvent Lambda Role
  SUSEShareAMITriggerLifecycleEventLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowLambdaAssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: SUSEShareAMILambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: '1'
                Action:
                  - 'ec2:DescribeImages'
                  - 'ec2:DescribeImageAttribute'
                  - 'ec2:DescribeImportImageTasks'
                  - 'ec2:ModifyImageAttribute'
                Effect: Allow
                Resource: '*'
              - Sid: '2'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Effect: Allow
                Resource: !Join [':',['arn:aws:logs', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'log-group', '/aws/lambda/*']]

  PermissionForEventsToInvokeLambdachk:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "TriggerCustomizationsOnLifeCycleEvent.Arn"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt "SUSEShareAMICaptureControlTowerLifeCycleEvents.Arn"
